# src/app.py
from dotenv import load_dotenv
load_dotenv() 
import os
import streamlit as st
from analyzer import analyze_url, summarize_results
import pandas as pd

st.set_page_config(page_title="Detector de Phishing", page_icon="üé£")
st.title("üé£ Detector de Phishing ‚Äî MVP")
st.subheader("Avalia√ß√£o de Tecnologias Hacker ‚Äî Beatriz Borges Zackiewicz")

st.markdown("""
Insira uma URL para an√°lise. Habilite as integra√ß√µes desejadas (integra√ß√£o uma-a-uma se preferir).
""")

VIRUSTOTAL_KEY = os.getenv("VIRUSTOTAL_KEY")
SAFE_BROWSING_KEY = os.getenv("SAFE_BROWSING_KEY")
OPENPHISH_FEED = os.getenv("OPENPHISH_FEED", "src/openphish_feed.txt")

def make_tag(text, color):
    return f"<span style='background-color:{color}; color:white; padding:2px 8px; border-radius:10px; font-size:0.8em;'>{text}</span>"

tags_html = " ".join([
    make_tag("Safe Browsing ‚úÖ" if SAFE_BROWSING_KEY else "Safe Browsing ‚ö†Ô∏è", "#2c7a7b" if SAFE_BROWSING_KEY else "#b7791f"),
    make_tag("VirusTotal ‚úÖ" if VIRUSTOTAL_KEY else "VirusTotal ‚ö†Ô∏è", "#2c7a7b" if VIRUSTOTAL_KEY else "#b7791f"),
    make_tag("OpenPhish dispon√≠vel" if os.path.exists(OPENPHISH_FEED) else "OpenPhish ausente", "#3182ce" if os.path.exists(OPENPHISH_FEED) else "#b7791f"),
])
st.markdown(f"<div style='text-align:center; margin-bottom:15px;'>{tags_html}</div>", unsafe_allow_html=True)

st.write("---")

# --- ENTRADA ---
url = st.text_input("Digite a URL para analisar:", placeholder="https://exemplo.com")

st.markdown("### üîç Escolha as verifica√ß√µes a executar:")
col1, col2, col3, col4 = st.columns(4)
with col1:
    use_openphish = st.checkbox("OpenPhish", True)
with col2:
    use_urlhaus = st.checkbox("URLhaus", True)
with col3:
    use_virustotal = st.checkbox("VirusTotal", False)
with col4:
    use_safebrowsing = st.checkbox("Google Safe Browsing", True)

run = st.button("üöÄ Analisar URL")

# --- EXECU√á√ÉO ---
if run:
    if not url:
        st.warning("Por favor insira uma URL v√°lida.")
    else:
        st.info("Executando verifica√ß√µes... (pode levar alguns segundos)")
        config = {
            "USE_OPENPHISH": use_openphish,
            "USE_URLHAUS": use_urlhaus,
            "USE_VIRUSTOTAL": use_virustotal,
            "USE_SAFE_BROWSING": use_safebrowsing,
            "OPENPHISH_FEED": OPENPHISH_FEED,
            "VIRUSTOTAL_KEY": VIRUSTOTAL_KEY,
            "SAFE_BROWSING_KEY": SAFE_BROWSING_KEY
        }

        results = analyze_url(url, config=config)
        verdict = summarize_results(results)

        # --- RESUMO ---
        st.markdown("## üß© Resumo da An√°lise")
        score = verdict["score"]
        ver_text = verdict["veredito"]

        if score >= 3:
            st.error(f"**{ver_text}** ‚Äî Score: {score}")
        elif score >= 1:
            st.warning(f"**{ver_text}** ‚Äî Score: {score}")
        else:
            st.success(f"**{ver_text}** ‚Äî Score: {score}")

        reasons = results.get("risk", {}).get("reasons", [])
        if reasons:
            st.markdown("**Principais sinais detectados:**")
            for r in reasons:
                st.markdown(f"- {r}")

        # --- M√âTRICAS CHAVE ---
        m1, m2, m3 = st.columns(3)
        m1.metric("Tamanho da URL", results.get("url_length", "‚Äî"))
        who_age = results.get("whois", {}).get("age_days", "‚Äî")
        m2.metric("Idade do dom√≠nio (dias)", who_age if who_age is not None else "‚Äî")
        ssl_status = results.get("ssl", {}).get("status", results.get("ssl", {}).get("valid", "‚Äî"))
        m3.metric("Status SSL", ssl_status)

        st.write("---")

        # --- DETALHES ---
        st.markdown("### üîé Detalhes das verifica√ß√µes")

        # Heur√≠sticas
        with st.expander("Heur√≠sticas (URL) ‚Äî interpreta√ß√£o detalhada"):
            # Explica√ß√£o de cada heur√≠stica
            heur_explanations = {
                "url_length": "Comprimento total da URL. URLs muito longas podem esconder par√¢metros suspeitos.",
                "num_subdomains": "N√∫mero de subdom√≠nios. Muitos subdom√≠nios (ex: login.secure.paypal.com.fake.site) indicam falsifica√ß√£o.",
                "has_ip": "Uso de endere√ßo IP em vez de nome de dom√≠nio. Sites leg√≠timos raramente usam IP diretamente.",
                "contains_digits": "Presen√ßa de n√∫meros no dom√≠nio. Exemplos como 'paypa1.com' ou 'g00gle.com' imitam marcas.",
                "special_chars": "Caracteres especiais no dom√≠nio. Podem ser usados para enganar visualmente (ex: 'amaz√≥n.com').",
                "has_at_symbol": "S√≠mbolo '@' encontrado. Pode redirecionar o navegador para outro dom√≠nio.",
                "has_double_slash_path": "M√∫ltiplos '//' ap√≥s o dom√≠nio. Podem ser usados para enganar o usu√°rio sobre a verdadeira URL."
            }

            # Captura os valores retornados pelo analisador
            heur_values = {
                key: results.get(key, "‚Äî")
                for key in heur_explanations.keys()
            }

            # Monta tabela com interpreta√ß√£o
            rows = []
            for key, desc in heur_explanations.items():
                val = heur_values.get(key, "‚Äî")
                emoji = "‚ö†Ô∏è" if val not in [False, "‚Äî", 0, None] else "‚úÖ"
                # texto adicional conforme tipo
                if key == "url_length":
                    risk_text = "Longa" if isinstance(val, int) and val > 100 else "Normal"
                elif key == "num_subdomains":
                    risk_text = "Alto" if isinstance(val, int) and val > 3 else "Normal"
                else:
                    risk_text = "Risco" if val not in [False, "‚Äî", 0, None] else "OK"

                rows.append([
                    key,
                    str(val),
                    f"{emoji} {risk_text}",
                    desc
                ])

            df_heur = pd.DataFrame(rows, columns=["Heur√≠stica", "Valor encontrado", "Indica√ß√£o", "Interpreta√ß√£o"])
            st.table(df_heur)



        # WHOIS
        with st.expander("Informa√ß√µes WHOIS"):
            who = results.get("whois", {})
            if who.get("status") == "error":
                st.error(f"Erro no WHOIS: {who.get('message')}")
            else:
                st.write(f"- Dom√≠nio: {who.get('domain')}")
                st.write(f"- Criado em: {who.get('creation_date')}")
                st.write(f"- Idade (dias): {who.get('age_days')}")

        # SSL
        with st.expander("Certificado SSL"):
            sslv = results.get("ssl", {})
            if sslv.get("status") == "valid":
                st.success(f"Certificado v√°lido at√©: {sslv.get('not_after')}")
            elif sslv.get("status") == "invalid":
                st.error(f"SSL inv√°lido / erro: {sslv.get('message')}")
            else:
                st.write(sslv)

        # Feeds e APIs
        with st.expander("Feeds e APIs ‚Äî Detalhes e interpreta√ß√£o"):
            def explain_found(source_name):
                st.error(f"{source_name}: encontrado!")
                if source_name == "OpenPhish":
                    st.markdown("**O que isso significa:** Esta URL foi reportada publicamente como phishing pelo OpenPhish ‚Äî alto grau de confian√ßa.")
                    st.markdown("**A√ß√£o recomendada:** N√£o acesse a URL em navegadores comuns; marque como phishing e denuncie se necess√°rio.")
                elif source_name == "URLhaus":
                    st.markdown("**O que isso significa:** URLhaus mant√©m um feed de URLs maliciosas (malware/phishing). Encontrado indica registro p√∫blico recente.")
                    st.markdown("**A√ß√£o recomendada:** Trate como malicioso; evite intera√ß√£o e remova e-mails/links que apontem para ela.")
                elif source_name == "VirusTotal":
                    st.markdown("**O que isso significa:** Diversos mecanismos de seguran√ßa analisaram essa URL/artefato. Dete√ß√µes indicam risco.")
                    st.markdown("**A√ß√£o recomendada:** confirmar com m√∫ltiplas fontes e evitar clicar; agregue evid√™ncias antes de a√ß√£o corretiva.")
                elif source_name == "Google Safe Browsing":
                    st.markdown("**O que isso significa:** O Google identificou esta URL como um vetor de engenharia social (phishing) ou software indesejado.")
                    st.markdown("**A√ß√£o recomendada:** bloquear, n√£o visitar, e avisar usu√°rios que receberam o link.")

            def explain_not_found(source_name):
                st.success(f"{source_name}: n√£o encontrado.")
                st.markdown("**O que isso significa:** A fonte pesquisada n√£o tem registro conhecido dessa URL. Isso **n√£o garante** que a URL √© segura ‚Äî apenas que n√£o h√° registro nessa base.")
                st.markdown("**A√ß√£o recomendada:** combine com heur√≠sticas e outras fontes; se heur√≠sticas forem suspeitas, trate com cautela.")

            def explain_skipped(source_name):
                st.info(f"{source_name}: verifica√ß√£o pulada (chave n√£o configurada).")
                st.markdown("**O que isso significa:** A checagem n√£o foi realizada ‚Äî configure a chave/API para obter verifica√ß√£o adicional.")
                st.markdown("**Como configurar:** ver README ‚Üí `.env` ‚Üí vari√°veis `SAFE_BROWSING_KEY`, `VIRUSTOTAL_KEY`.")

            def explain_error(source_name, message):
                st.warning(f"{source_name}: erro ‚Äî {message}")
                st.markdown("**O que isso significa:** houve um problema t√©cnico consultando a fonte. Isso pode ser tempor√°rio.")
                st.markdown("**A√ß√£o recomendada:** tente novamente mais tarde ou verifique sua conex√£o / quotas / formato da URL.")

            # ---- OpenPhish ----
            op = results.get("openphish")
            st.subheader("OpenPhish")
            if isinstance(op, dict):
                s = op.get("status")
                if s == "found":
                    explain_found("OpenPhish")
                    st.markdown("> Fonte: OpenPhish feed p√∫blico")
                elif s == "not_found":
                    explain_not_found("OpenPhish")
                elif s == "error":
                    explain_error("OpenPhish", op.get("message"))
                else:
                    st.write(op)
            else:
                st.write(op)

            st.markdown("---")

            # ---- URLhaus ----
            uh = results.get("urlhaus")
            st.subheader("URLhaus")
            if isinstance(uh, dict):
                s = uh.get("status")
                if s == "found":
                    explain_found("URLhaus")
                    matches = uh.get("matches", [])
                    st.markdown("**Ocorr√™ncias (exemplo):**")
                    for m in matches:
                        st.text(m)
                    st.markdown("> Nota: usamos o feed CSV p√∫blico do URLhaus para esta verifica√ß√£o.")
                elif s == "not_found":
                    explain_not_found("URLhaus")
                elif s == "error":
                    explain_error("URLhaus", uh.get("message"))
                else:
                    st.write(uh)
            else:
                st.write(uh)

            st.markdown("---")

            # ---- VirusTotal ----
            vt = results.get("virustotal")
            st.subheader("VirusTotal")
            if isinstance(vt, dict):
                s = vt.get("status")
                if s == "found":
                    explain_found("VirusTotal")
                    positives = vt.get("positives", 0)
                    st.markdown(f"- **Detec√ß√µes totais (positives):** {positives}")
                    stats = vt.get("last_analysis_stats", {})
                    if isinstance(stats, dict):
                        st.markdown("**Resumo por categoria:**")
                        st.table(pd.DataFrame(list(stats.items()), columns=["Categoria","Contagem"]))
                    else:
                        st.write(stats)
                    st.markdown("> Observa√ß√£o: a contagem √© a soma de engines que marcaram a URL; verifique `Dados brutos (JSON)` para detalhes por engine.")
                elif s == "not_found":
                    explain_not_found("VirusTotal")
                elif s == "skipped":
                    explain_skipped("VirusTotal")
                elif s == "error":
                    explain_error("VirusTotal", vt.get("message"))
                else:
                    st.write(vt)
            else:
                st.write(vt)

            st.markdown("---")

            # ---- Google Safe Browsing ----
            sb = results.get("safe_browsing")
            st.subheader("Google Safe Browsing")
            if isinstance(sb, dict):
                s = sb.get("status")
                if s == "found":
                    explain_found("Google Safe Browsing")
                    st.markdown(f"- **Quantidade de matches:** {sb.get('quantidade')}")
                    st.markdown("**Detalhes das correspond√™ncias:**")
                    for d in sb.get("detalhes", sb.get("threat_types", [])):
                        # d pode ser string ou dict dependendo da fun√ß√£o; tratamos dict
                        if isinstance(d, dict):
                            st.write(f"- Tipo de amea√ßa: **{d.get('tipo_amea√ßa')}**")
                            st.write(f"  - Plataforma: {d.get('plataforma')}")
                            st.write(f"  - Cache duration: {d.get('cache_duracao')}")
                            st.write("---")
                        else:
                            st.write(f"- {d}")
                    st.markdown("Observa√ß√£o: `SOCIAL_ENGINEERING` indica classifica√ß√£o t√≠pica de phishing (eng. social).")
                elif s == "not_found":
                    explain_not_found("Google Safe Browsing")
                elif s == "skipped":
                    explain_skipped("Google Safe Browsing")
                elif s == "error":
                    explain_error("Google Safe Browsing", sb.get("message"))
                else:
                    st.write(sb)
            else:
                st.write(sb)

            st.markdown("---")
            st.markdown("**Guia r√°pido de interpreta√ß√£o:**")
            st.markdown("- **Encontrado** em qualquer feed/API ‚Üí trate como malicioso at√© prova em contr√°rio. Evite abrir o link.")
            st.markdown("- **N√£o encontrado** ‚Üí pode ser leg√≠timo ou novo; combine com heur√≠sticas (idade do dom√≠nio, formul√°rios de login, similaridade de marca).")
            st.markdown("- **Pulou verifica√ß√£o** ‚Üí configure as chaves em `.env` para habilitar mais checagens.")
            st.markdown("- **Erro t√©cnico** ‚Üí pode ser tempor√°rio; tente novamente ou consulte o `Dados brutos (JSON)` para depura√ß√£o.")


        with st.expander("Dados brutos (JSON)"):
            st.json(results)

        # Exportar CSV
        flat = {
            "url": url,
            "veredito": verdict["veredito"],
            "score": verdict["score_text"],
            "reasons": "; ".join(results.get("risk", {}).get("reasons", [])),
            "whois_age_days": results.get("whois", {}).get("age_days"),
            "ssl_status": results.get("ssl", {}).get("status")
        }
        csv = pd.DataFrame([flat]).to_csv(index=False).encode("utf-8")
        st.download_button("üì• Baixar relat√≥rio (CSV)", csv, "phish_report.csv", "text/csv")